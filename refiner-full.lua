{"slots":{"0":{"name":"refinerR4","type":{"events":[],"methods":[]}},"1":{"name":"refinerR3","type":{"events":[],"methods":[]}},"2":{"name":"refinerR2","type":{"events":[],"methods":[]}},"3":{"name":"refinerR1","type":{"events":[],"methods":[]}},"4":{"name":"refinerL4","type":{"events":[],"methods":[]}},"5":{"name":"refinerL3","type":{"events":[],"methods":[]}},"6":{"name":"refinerL2","type":{"events":[],"methods":[]}},"7":{"name":"refinerL1","type":{"events":[],"methods":[]}},"8":{"name":"screen","type":{"events":[],"methods":[]}},"9":{"name":"core","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"updateScreen()\n","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"0"},"key":"0"},{"code":"updateScreen()","filter":{"args":[],"signature":"completed()","slotKey":"0"},"key":"1"},{"code":"updateScreen()\n","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"1"},"key":"2"},{"code":"updateScreen()","filter":{"args":[],"signature":"completed()","slotKey":"1"},"key":"3"},{"code":"updateScreen()\n","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"2"},"key":"4"},{"code":"updateScreen()","filter":{"args":[],"signature":"completed()","slotKey":"2"},"key":"5"},{"code":"updateScreen()\n","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"3"},"key":"6"},{"code":"updateScreen()\n","filter":{"args":[],"signature":"completed()","slotKey":"3"},"key":"7"},{"code":"updateScreen()\n","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"4"},"key":"8"},{"code":"updateScreen()","filter":{"args":[],"signature":"completed()","slotKey":"4"},"key":"9"},{"code":"updateScreen()\n","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"5"},"key":"10"},{"code":"updateScreen()","filter":{"args":[],"signature":"completed()","slotKey":"5"},"key":"11"},{"code":"updateScreen()\n","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"6"},"key":"12"},{"code":"updateScreen()\n","filter":{"args":[],"signature":"completed()","slotKey":"6"},"key":"13"},{"code":"updateScreen()","filter":{"args":[{"value":"status"}],"signature":"statusChanged(status)","slotKey":"7"},"key":"14"},{"code":"updateScreen()\n","filter":{"args":[],"signature":"completed()","slotKey":"7"},"key":"15"},{"code":"for i, area in pairs(clickableAreas) do\n\tif (x >= area.x and x <= (area.x + area.hx) and y >= area.y and y <= (area.y + area.hy)) then\n\t\tif (area.parameter ~= false) then area.fun(area.parameter)\n          else area.fun()\n\t\tend\n\tend\nend\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"8"},"key":"16"},{"code":"function oreStatus(percent, invert)\n\tif invert == 0 then\n\t\tif percent <= 25 then return \"<th style=\\\"color: red;\\\">LOW</th>\"\n\t\telseif percent > 25 and percent < 50 then return \"<th style=\\\"color: orange;\\\">LOW</th>\"\n\t\telse return \"<th style=\\\"color: green;\\\">GOOD</th>\"\n\t\tend \n\telse\n\t\tif percent <= 25 then return \"<th style=\\\"color: green;\\\">GOOD</th>\"\n\t\telseif percent > 25 and percent < 75 then return \"<th style=\\\"color: orange;\\\">OK</th>\"\n\t\telse return \"<th style=\\\"color: red;\\\">HIGH</th>\"\n\t\tend \n\tend\nend\n\nrefiners = {refinerL1, refinerL2, refinerL3, refinerL4, refinerR1, refinerR2, refinerR3, refinerR4}\nrefinerNames = {\"L1\", \"L2\", \"L3\", \"L4\", \"R1\", \"R2\", \"R3\", \"R4\"}\nschematics = {\n    bauxit = 1199082577;\n    petalite = 214807072;\n    purite = 547899423;\n    garnierite = 1085756222;\n    quartz = 1678829760;\n    limestone = 1358793857;\n    chromite = 67742786;\n    natron = 1843262763;\n    hematite = 1833008839;\n    \n}\nchangeButtons = {}\nclickableAreas = {}\nchangeContentId = 0\nshouldUpdate = { update = false, endtime = system.getTime() }\n\nfunction updateIn(time)\n    local duration = system.getTime() + time\n    shouldUpdate = { update = true, endtime = duration }\nend\n\nfunction startRefiner(refiner)\n\trefiner.start()\n\tupdateIn(1)\nend\n\nfunction stopRefiner(refiner)\n\trefiner.softStop()\n\tupdateIn(1)\nend\n\nfunction showSchematics(refiner)\n\tlocal html = \"\";\n\tlocal buttonTop = 0.15\n\tlocal buttonLeft = 0.2\n\tlocal counter = 1\n\n\tfor schematicName, schematicId in pairs(schematics) do\n\t\tlocal parameter = { refiner = refiner, schematic = schematicId }\n\t\tlocal changeButton = createButton(buttonLeft, buttonTop, 0.20, 0.07, schematicName, \"green\", 3, changeSchematic, parameter)\n\n\t\tcounter = counter + 1\n\t\tbuttonLeft = buttonLeft + 0.22\n\t\tif counter % 3 == 1 then\n                buttonLeft = 0.2;\n                buttonTop = buttonTop + 0.1\n\t\tend\n\tend\nend\n\nfunction changeSchematic(parameters)\n\tlocal refiner = parameters.refiner\n\tlocal id = parameters.schematic\n\n\trefiner.setCurrentSchematic(id)\n    \n\tfor i, id in pairs(changeButtons) do\n\t\tscreen.deleteContent(id)\n     end\n    \n\tupdateIn(1)\nend\n\nfunction createButton(x, y, hx, hy, text, color, fontsize, fun, parameter)\n\tbutton = \"<div class='bootstrap' style='background:\"..color..\";width:\"..(hx*100)..\"vw;height:\"..(hy*100)..\"vh;overflow:hidden;padding-top:\"..(((hy*100)/2)-1.2)..\"vh;font-size:\"..fontsize..\"vh; position:fixed; left: \"..(x*100)..\"vw; top:\"..(y*100)..\"vh;'>\" .. text .. \"</div>\"\n\tid = screen.addContent(x * 100,y * 100, button)\n    \n\tif parameter and parameter.schematic ~= nil then table.insert(changeButtons, id) end\n\n\tlocal area = {id = id, x = x, y = y, hx = hx, hy = hy, fun = fun, parameter = parameter }\n\tclickableAreas[id] = area\n\n\treturn button\nend\n\n\nfunction updateScreen()\n\tlocal refinerHTML = \"\"\n\tlocal buttonTop = 0.35\n    \n\tclickableAreas = {}\n\n\tfor i, refiner in pairs(refiners) do\n\t\tlocal status = refiner.getStatus()\n\n\t\tif status == \"RUNNING\" then status = \"<span style=\\\"color:green\\\">Running</span>\"\n\t\telse status = \"<span style=\\\"color:red\\\">\" .. status .. \"</span>\"\n\t\tend\n\n\t\tlocal schematicId = refiner.getCurrentSchematic()\n\t\tlocal schematicInfo = json.decode(core.getSchematicInfo(schematicId))\n\t\tlocal schematicName = schematicInfo[\"ingredients\"][1][\"name\"]\n        \n\t\tlocal stopButton = createButton(0.78, buttonTop, 0.05, 0.045, \"stop\", \"red\", 2, stopRefiner, refiner)\n\t\tlocal changeButton = createButton(0.84, buttonTop, 0.05, 0.045, \"change\", \"blue\", 2, showSchematics, refiner)\n\t\tlocal startButton = createButton(0.9, buttonTop, 0.05, 0.045, \"start\", \"green\", 2, startRefiner, refiner)\n\n\t\tbuttonTop = buttonTop + 0.062\n\n\t\trefinerHTML = refinerHTML .. [[\n<tr>\n\t<td>]]..refinerNames[i]..[[</td>\n\t<td>]]..schematicName..[[</td>\n\t<td>]]..status..[[</td>\n\t<td>]]..stopButton..changeButton..startButton..[[</td>\n</tr>]]\n\tend\n\n\thtml = [[\n<div class=\"bootstrap\">]] .. createButton(0.8, 0.1, 0.1, 0.06, \"refresh\", \"blue\", 2, updateScreen, false)..[[\n<h1 style=\"font-size: 4em;\">Refiner Status</h1>\n<table \nstyle=\"\n\tmargin-top: 10px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\twidth: 90%;\n\tfont-size: 3em;\n\">\n\t</br>\n\t<tr style=\"\n\t\twidth: 100%;\n\t\tmargin-bottom: 10px;\n\t\tbackground-color: blue;\n\t\tcolor: white;\n\t\">\n\t\t<th>Name</th>\n\t\t<th>Schematic</th>\n\t\t<th>Status</th>\n\t\t<th>Action</th>\n\t</tr>\n\t]]..refinerHTML..[[\n</table>\n</div>\n]]\n    \n\tscreen.setHTML(html)\nend\n\nscreen.clear()\nupdateScreen()\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"17"},{"code":"if shouldUpdate.update == true then\n\tif system.getTime() >= shouldUpdate.endtime then\n\t\tupdateScreen()\n\tend\nend","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"18"},{"code":"function dump(o)\n   if type(o) == 'table' then\n      local s = '{ '\n      for k,v in pairs(o) do\n         if type(k) ~= 'number' then k = '\"'..k..'\"' end\n         s = s .. '['..k..'] = ' .. dump(v) .. ','\n      end\n      return s .. '} '\n   else\n      return tostring(o)\n   end\nend\n\nfunction round(number,decimals)\n    local power = 10^decimals\n    return math.floor((number/1000) * power) / power\nend \n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"19"}],"methods":[],"events":[]}
