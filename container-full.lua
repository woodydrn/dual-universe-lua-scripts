{"slots":{"0":{"name":"storage","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"container","type":{"events":[],"methods":[]}},"3":{"name":"storageScreen","type":{"events":[],"methods":[]}},"4":{"name":"containerScreen","type":{"events":[],"methods":[]}},"5":{"name":"detector","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local items = storage.getItemsList()\nlocal decoded = json.decode(items)\nlocal html = [[\n<div class=\"bootstrap\">\n<h1 style=\"font-size: 4em;\">Storage items</h1>\n<table style=\"\n\tmargin-top: 10px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\twidth: 90%;\n\tfont-size: 3em;\n\">\n\t<tr style=\"\n\t\twidth: 100%;\n\t\tmargin-bottom: 10px;\n\t\tbackground-color: blue;\n\t\tcolor: white;\n\t\">\n\t\t<th>Name</th>\n\t\t<th>Volume</th>\n\t</tr>\n]]\n    \nfor k,v in pairs(decoded) do\n    html = html .. [[\n\t<tr>\n\t\t<td>]]..v.name..[[</td>\n\t\t<td>]]..round(v.quantity,1)..[[KL</td>\n\t</tr>\n\t]]\nend\n\nhtml = html .. \"</table>\"\n\nstorageScreen.setHTML(html)\n","filter":{"args":[],"signature":"storageAcquired()","slotKey":"0"},"key":"0"},{"code":"local items = container.getItemsList()\nlocal decoded = json.decode(items)\nlocal html = [[\n<div class=\"bootstrap\">\n<h1 style=\"font-size: 4em;\">Container Items</h1>\n<table style=\"\n\tmargin-top: 10px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\twidth: 90%;\n\tfont-size: 3em;\n\">\n\t<tr style=\"\n\t\twidth: 100%;\n\t\tmargin-bottom: 10px;\n\t\tbackground-color: blue;\n\t\tcolor: white;\n\t\">\n\t\t<th>Name</th>\n\t\t<th>Volume</th>\n\t</tr>\n]]\n    \nfor k,v in pairs(decoded) do\n\tif (string.find(v.name, \"Pure \") ~= 1 and string.find(v.name, \"Nickel pure\") ~= 1) then\n\t\thtml = html .. [[\n\t\t<tr>\n\t\t\t<td>]]..v.name..[[</td>\n\t\t\t<td>]]..round(v.quantity,1)..[[KL</td>\n\t\t</tr>\n\t\t]]\n\tend\nend\n\nhtml = html .. \"</table>\"\n\ncontainerScreen.setHTML(html)\n","filter":{"args":[],"signature":"storageAcquired()","slotKey":"2"},"key":"1"},{"code":"if id == 77636 then\n\tcontainer.acquireStorage()\n\tstorage.acquireStorage()\nend\n","filter":{"args":[{"variable":"*"}],"signature":"enter(id)","slotKey":"5"},"key":"2"},{"code":"function round(number,decimals)\n\tlocal power = 10^decimals\n\treturn math.floor((number/1000) * power) / power\nend \n\nfunction percent(volume, max)\n\treturn math.ceil((volume/max)*100)\nend\n\nfunction oreStatus(percent, invert)\n\tif invert == 0 then\n\t\tif percent <= 25 then return \"<th style=\\\"color: red;\\\">LOW</th>\"\n\t\telseif percent > 25 and percent <= 50 then return \"<th style=\\\"color: orange;\\\">OK</th>\"\n\t\telse return \"<th style=\\\"color: green;\\\">GOOD</th>\"\n\t\tend \n\telse\n\t\tif percent <= 50 then return \"<th style=\\\"color: green;\\\">GOOD</th>\"\n\t\telseif percent > 50 and percent <= 75 then return \"<th style=\\\"color: orange;\\\">OK</th>\"\n\t\telse return \"<th style=\\\"color: red;\\\">Almost at max</th>\"\n\t\tend \n\tend\nend\n\nfunction dump(o)\n   if type(o) == 'table' then\n      local s = '{ '\n      for k,v in pairs(o) do\n         if type(k) ~= 'number' then k = '\"'..k..'\"' end\n         s = s .. '['..k..'] = ' .. dump(v) .. ','\n      end\n      return s .. '} '\n   else\n      return tostring(o)\n   end\nend\n\nfunction isNotEmpty(s)\n\treturn s ~= nil and s ~= ''\nend\n\nstartTime = math.ceil(system.getTime())\n\nmaxContainer = 1241.60\nmaxStorage = 614.40\ncontainerVolume = 0\nstorageVolume = 0\n\ncontainerPercent = 0\ncontainerStatus = \"\"\n\nstoragePercent = 0\nstorageStatus = \"\"\n\nold_containerVolume = -1\nold_storageVolume = -1\n\nshouldUpdateContainer = false\nshouldUpdateStorage = false\n\ncontainer.acquireStorage()\nstorage.acquireStorage()\n\nfunction populateVariables()\n\tlocal cv = container.getItemsVolume()\n    \n\tif isNotEmpty(cv) then containerVolume = round(math.ceil(cv),1)\n     else containerVolume = 0\n     end\n\n\tlocal sv = storage.getItemsVolume()\n\tif isNotEmpty(sv) then storageVolume = round(math.ceil(sv),1)\n     else storageVolume = 0\n     end\n    \n     containerPercent = percent(containerVolume, maxContainer)\n\tcontainerStatus = oreStatus(containerPercent, 0)\n\n\tstoragePercent = percent(storageVolume, maxStorage)\n\tstorageStatus = oreStatus(storagePercent, 1)\nend\n\nfunction updateScreen()\n\tif old_containerVolume == containerVolume and old_storageVolume == storageVolume then\n\t\treturn\n\tend\n\n\tif old_containerVolume ~= containerVolume then\n\t\told_containerVolume = containerVolume\n\t\tshouldUpdateContainer = true\n     end\n    \n\tif old_storageVolume ~= storageVolume then\n\t\told_storageVolume = storageVolume\n\t\tshouldUpdateStorage = true\n     end\n    \n\thtml = [[\n<div class=\"bootstrap\">\n<h1 style=\"font-size: 4em;\">Container Status</h1>\n<table \nstyle=\"\n\tmargin-top: 10px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\twidth: 90%;\n\tfont-size: 3em;\n\">\n\t</br>\n\t<tr style=\"\n\t\twidth: 100%;\n\t\tmargin-bottom: 10px;\n\t\tbackground-color: blue;\n\t\tcolor: white;\n\t\">\n\t\t<th>Name</th>\n\t\t<th>Volume</th>\n\t\t<th>Percent</th>\n\t\t<th>Status</th>\n\t</tr>\n\t<tr>\n\t\t<td>Container</td>\n\t\t<td>]]..containerVolume..[[KL</td>\n\t\t<td>]]..containerPercent..[[%</td>\n\t\t]]..containerStatus..[[\n\t</tr>\n\t<tr>\n\t\t<td>Storage</th>\n\t\t<td>]]..storageVolume..[[KL</td>\n\t\t<td>]]..storagePercent..[[%</td>\n\t\t]]..storageStatus..[[\n\t</tr>\n</table>\n</div>\n]]\n    \n\tscreen.setHTML(html)\nend\n\nscreen.clear()\npopulateVariables()\nupdateScreen()\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"3"},{"code":"populateVariables()\nupdateScreen()\n\nlocal now = math.ceil(system.getTime())\n\nif (now > (startTime + 120)) then\n    if shouldUpdateContainer then\n        container.acquireStorage()\n        shouldUpdateContainer = false\n        startTime = math.ceil(system.getTime())\n    end\n    \n    if shouldUpdateStorage then\n        storage.acquireStorage()\n        shouldUpdateStorage = false\n        startTime = math.ceil(system.getTime())\n    end\nend\n","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"4"},{"code":"","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"5"}],"methods":[],"events":[]}
